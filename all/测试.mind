{"root":{"data":{"id":"dcb4rbus9ig0","created":1756086636831,"text":"springboot-test","resource":["问问"]},"children":[{"data":{"id":"dcb4ri40sl40","created":1756086650450,"text":"junit","layout_mind_offset":{"x":9,"y":-15}},"children":[]},{"data":{"id":"dcb4rkf1fmw0","created":1756086655470,"text":"Mockito"},"children":[]},{"data":{"id":"dcb52dcspvs0","created":1756087502103,"text":"单元，集成，分层测试","note":"在 Spring Boot 中，“单元测试”（Unit Test）和“集成测试”（Integration Test）有不同的实现方式。你提到的是**单元测试**，它的核心目标是：**隔离测试某个类或方法，不依赖 Spring 容器或外部组件（如数据库、网络等）**。\n\n---\n\n## ✅ 一、什么是 Spring Boot 的“单元测试”？\n\n- **目标**：只测试一个类的逻辑，比如 `UserService` 中的某个方法。\n- **原则**：不加载 Spring 上下文，不连接数据库，不启动 Web 服务器。\n- **工具**：使用 JUnit + Mockito（或其他 Mock 框架）来模拟依赖。\n\n> ⚠️ 注意：很多人误把 `@SpringBootTest` 当作“单元测试”，其实它是**集成测试**。真正的单元测试应该是轻量、快速、无依赖的。\n\n---\n\n## ✅ 二、单元测试的实现步骤\n\n### 步骤 1：添加依赖（通常已包含）\n\n```xml\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-test</artifactId>\n    <scope>test</scope>\n</dependency>\n```\n\n它包含了：\n- JUnit 4 或 JUnit 5\n- Mockito\n- Spring Test\n- AssertJ\n- Hamcrest\n- JSONassert\n- JsonPath\n\n---\n\n### 步骤 2：编写被测类\n\n```java\n// src/main/java/com/example/service/UserService.java\npackage com.example.service;\n\nimport com.example.repository.UserRepository;\nimport com.example.entity.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class UserService {\n\n    private final UserRepository userRepository;\n\n    // 构造器注入（推荐用于单元测试）\n    public UserService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    public User createUser(String name, Integer age) {\n        if (name == null || name.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Name cannot be null or empty\");\n        }\n        User user = new User(name, age);\n        return userRepository.save(user); // 依赖外部组件\n    }\n\n    public String getUserInfo(String name) {\n        return \"User: \" + name.toUpperCase();\n    }\n}\n```\n\n---\n\n### 步骤 3：编写单元测试（不加载 Spring 上下文）\n\n```java\n// src/test/java/com/example/service/UserServiceUnitTest.java\npackage com.example.service;\n\nimport com.example.entity.User;\nimport com.example.repository.UserRepository;\nimport org.junit.Before;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.mockito.Mock;\nimport org.mockito.junit.MockitoJUnitRunner;\n\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\n/**\n * 单元测试：只测试 UserService 的逻辑，不加载 Spring 上下文\n */\n@RunWith(MockitoJUnitRunner.class)  // 启用 Mockito 注解支持\npublic class UserServiceUnitTest {\n\n    @Mock  // 模拟依赖\n    private UserRepository userRepository;\n\n    private UserService userService;\n\n    @Before\n    public void setUp() {\n        // 手动创建 UserService，并注入 mock 的依赖\n        userService = new UserService(userRepository);\n    }\n\n    @Test\n    public void shouldCreateUserWhenNameIsValid() {\n        // 准备模拟行为\n        User savedUser = new User(\"Alice\", 25);\n        savedUser.setId(\"123\");\n        when(userRepository.save(any(User.class))).thenReturn(savedUser);\n\n        // 调用被测方法\n        User result = userService.createUser(\"Alice\", 25);\n\n        // 验证结果\n        assertNotNull(result);\n        assertEquals(\"123\", result.getId());\n        assertEquals(\"Alice\", result.getName());\n\n        // 验证是否调用了 save 方法\n        verify(userRepository, times(1)).save(any(User.class));\n    }\n\n    @Test(expected = IllegalArgumentException.class)\n    public void shouldThrowExceptionWhenNameIsNull() {\n        userService.createUser(null, 20);\n    }\n\n    @Test\n    public void shouldReturnUpperCaseUserInfo() {\n        // 这个方法不依赖外部组件，可以直接测试\n        String info = userService.getUserInfo(\"bob\");\n        assertEquals(\"User: BOB\", info);\n    }\n}\n```\n\n---\n\n## ✅ 三、关键点说明\n\n| 技术 | 作用 |\n|------|------|\n| `@RunWith(MockitoJUnitRunner.class)` | 启用 Mockito 的 `@Mock`、`@InjectMocks` 等注解 |\n| `@Mock` | 创建一个 mock 对象（模拟行为） |\n| `when(...).thenReturn(...)` | 定义 mock 对象的返回值 |\n| `verify(...)` | 验证某个方法是否被调用 |\n| **不使用 `@SpringBootTest`** | 避免加载 Spring 上下文，保持测试轻量 |\n\n---\n\n## ✅ 四、单元测试 vs 集成测试 对比\n\n| 特性 | 单元测试（Unit Test） | 集成测试（Integration Test） |\n|------|------------------------|------------------------------|\n| 是否加载 Spring 上下文 | ❌ 否 | ✅ 是（用 `@SpringBootTest`） |\n| 是否连接数据库 | ❌ 否（用 `@MockBean` 模拟） | ✅ 是（真实操作） |\n| 速度 | ⚡ 很快（毫秒级） | 🐢 较慢（秒级） |\n| 适用场景 | 测试单个类的业务逻辑 | 测试多个组件协同工作 |\n| 依赖 | JUnit + Mockito | JUnit + Spring Test + Spring Context |\n\n---\n\n## ✅ 五、其他常见单元测试场景\n\n### 1. 测试 Controller 层（不启动 Web 容器）\n\n```java\n@Test\npublic void shouldReturnUserWhenValidId() {\n    when(userService.findById(1L)).thenReturn(new User(\"Alice\", 25));\n\n    User result = userController.getUser(1L);\n\n    assertEquals(\"Alice\", result.getName());\n}\n```\n\n### 2. 测试工具类（纯 Java 类）\n\n```java\n@Test\npublic void shouldFormatDateCorrectly() {\n    String result = DateUtils.format(LocalDate.of(2025, 1, 1));\n    assertEquals(\"2025-01-01\", result);\n}\n```\n\n---\n\n## ✅ 六、最佳实践\n\n1. **优先写单元测试**：快速、稳定、易于调试。\n2. **使用构造器注入**：便于在测试中手动创建对象。\n3. **避免 `new` 外部依赖**：否则无法 mock。\n4. **测试边界条件**：空值、异常、极端值。\n5. **保持测试独立**：每个测试方法应独立运行，不依赖顺序。\n\n---\n\n## ✅ 七、总结\n\n| 问题 | 回答 |\n|------|------|\n| Spring Boot 单元测试如何实现？ | 使用 **JUnit + Mockito**，**不加载 Spring 上下文**，**mock 外部依赖** |\n| 是否使用 `@SpringBootTest`？ | ❌ 不使用（那是集成测试） |\n| 核心工具是什么？ | `@Mock`, `when().thenReturn()`, `verify()` |\n| 目标是什么？ | 快速、隔离地测试单个类的逻辑 |\n\n✅ 所以，真正的 Spring Boot **单元测试**是：\n> **轻量、快速、无 Spring 容器、依赖 Mock 的测试方式**。\n\n如果你需要测试数据库、Web 接口等真实交互，请使用 `@SpringBootTest` —— 但那已经是**集成测试**了。","layout_mind_offset":{"x":-33,"y":0}},"children":[{"data":{"id":"dcb5pd31y000","created":1756089303890,"text":"单元测试测试逻辑"},"children":[]},{"data":{"id":"dcb5pq02gvs0","created":1756089332007,"text":"集成测试测试各个依赖的稳定性"},"children":[]}]},{"data":{"id":"dcb4y738srs0","created":1756087175008,"text":"完整上下文"},"children":[]},{"data":{"id":"dcb4yeeurmw0","created":1756087190947,"text":"局部上下文"},"children":[]},{"data":{"id":"dcb4ylhboyg0","created":1756087206334,"text":"分支主题"},"children":[]}]},"template":"default","theme":"fresh-blue","version":"1.4.43"}